import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

configurations {
    includeInJar {
        canBeResolved(true)
        canBeConsumed(false)
        transitive false
    }
}

dependencies {
    includeInJar group: 'it.water.core', name: 'Core-api', version: project.waterVersion
    includeInJar group: 'it.water.core', name: 'Core-bundle', version: project.waterVersion
    includeInJar group: 'it.water.core', name: 'Core-interceptors', version: project.waterVersion
    includeInJar group: 'it.water.core', name: 'Core-model', version: project.waterVersion
    includeInJar group: 'it.water.core', name: 'Core-permission', version: project.waterVersion
    includeInJar group: 'it.water.core', name: 'Core-registry', version: project.waterVersion
    includeInJar group: 'it.water.core', name: 'Core-security', version: project.waterVersion
    includeInJar group: 'it.water.core', name: 'Core-service', version: project.waterVersion
    includeInJar group: 'it.water.core', name: 'Core-validation', version: project.waterVersion
    includeInJar group: 'it.water.implementation', name: 'Implementation-spring', version: project.waterVersion
}

/**
 * Creates spring jar file -
 * We use ShadowJar in order to merge all META-INF/annotations/it.water.base.interceptors.annotations.FrameworkComponent file
 * This file is used by AtteoClassIndex in order to track all @FrameworkComponent classes avoiding class scanning which is slower.
 * Atteo class index generates annotations file which needs to be merged collecting entries from all jars.*/
task("springJar", type: ShadowJar) {
    from sourceSets.main.output
    archiveBaseName.set('Water-Distribution-spring')
    archiveClassifier.set('')
    from project.configurations.includeInJar.collect { it.isDirectory() ? it : zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    mergeServiceFiles {
        path = '**/META-INF/annotations'
    }
}

jar {
    enabled false
}

jar.dependsOn(springJar)

//publish configurations
publishing {
    publications {
        spring(MavenPublication) {
            artifact tasks.springJar
            artifactId 'Water-distribution-spring'
        }
    }
}